暑假:
1.完成了相机矫正
  发现了principal point的作用,成功整合了相机标定工具箱,使基于符号计算的相机定位变得非常精确.

2.完善了标定板定位主程序和控制点传递主程序
  含有标定板的相片命名为begin系列, 含有已知坐标控制点的相片命名为next系列. 编写出手动提取不同相片之间特征点的程序featurepoints. 还有用于储存一切数据的Lerr2(以3D点分类的数据)和begin_cams(以相片分类的数据);

3.完成了数值解三棱锥的程序
  用传递法确定单调区间, 再用二分法从中解出所有数值解.经过调试可以代替符号解程序,速度大大提高,基本不用等.(但程序有可能解不出直角三棱锥)

4.完成了相机定位最优化程序
  改程序的出现彻底改变了Pmntri+Ppick+ori(大量三棱锥,选取所需解,相机简单方向定位)的相机定位模式.代之以numpmd+Pmn2S2(先用少量三棱锥粗略定位,再用fminsearch定位,使重新投影的特征点与特征点之间的距离方差(S2)最小)


接下来: 根据已改变的相机模式,彻底修改begin_cam和next_cam中的相机定位方法,使整个程序的质量和效率大大提升.
接下来: 根据已改变的相机模式, 彻底修改begin_cam和next_cam中的相机定位方法, 使整个程序的质量和效率大大提升.
1.关于begin的修改,只需修改其调用的board2cam即可.



另外的计划:

*把board_corner函数做出来,这样在只有部分board被照到的时候,也可以精确相机定位.
*设置若干条用于展示的相机路径,沿着路径不断修改CameraPosition用于动态展示或者制作视频
*如果能实现视频流的自动化,和取格点的自动化,那么3D鼠标一点问题都不会有的.
*解密控制点
这个很有用,而且之前也有研究过,再加上新发现的fminsearch,非常有希望
*GUI
等把东西都做好了再完善也不迟
*更精确的相机标定
现在的知识暂时还不够吧

哎..deturn实验失败,原来是调试的数据没有平移只有转动.所以还是要规定空间点,先平移再转动的...问题是规定了空间点,怎么确保相机能照到呢?所以还是先把相机变成飞机吧...结果发现camera_tool_bar早就实现这个功能了...虽然没那么方便,但至少还是能用的

另外,为了能让deturn调试方便,想编一个由两个cam算出理论camturn的方法, 但是这个程序又缺乏generality,于是又想到把旋转矩阵跟camturn联系起来,编写互相转换的函数